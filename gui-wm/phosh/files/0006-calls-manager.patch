From ac8f72dafc04d94f79d2466177b43f50943c3dad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Wed, 7 Apr 2021 15:07:11 +0200
Subject: [PATCH 8/9] lockscreen-manager: Unblank on incoming calls
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Do it here instead of in lockscreen-manager since
is where we'd also switch to the calls page later on.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/lockscreen-manager.c | 48 ++++++++++++++++++++++++++++++++++------
 src/lockscreen-manager.h |  3 ++-
 src/shell.c              |  2 +-
 3 files changed, 44 insertions(+), 9 deletions(-)

diff --git a/src/lockscreen-manager.c b/src/lockscreen-manager.c
index afcdb6ba..4b986362 100644
--- a/src/lockscreen-manager.c
+++ b/src/lockscreen-manager.c
@@ -44,6 +44,7 @@ static guint signals[N_SIGNALS] = { 0 };
 enum {
   PROP_0,
   PROP_LOCKED,
+  PROP_CALLS_MANAGER,
   PROP_LAST_PROP
 };
 static GParamSpec *props[PROP_LAST_PROP];
@@ -52,13 +53,15 @@ static GParamSpec *props[PROP_LAST_PROP];
 struct _PhoshLockscreenManager {
   GObject parent;
 
-  PhoshLockscreen *lockscreen;     /* phone display lock screen */
-  PhoshSessionPresence *presence;  /* gnome-session's presence interface */
-  GPtrArray *shields;              /* other outputs */
+  PhoshLockscreen      *lockscreen;     /* phone display lock screen */
+  PhoshSessionPresence *presence;       /* gnome-session's presence interface */
+  GPtrArray             *shields;       /* other outputs */
 
   gboolean locked;
-  gint64 active_time;              /* when lock was activated (in us) */
-  int transform;                   /* the shell transform before locking */
+  gint64 active_time;                   /* when lock was activated (in us) */
+  int transform;                        /* the shell transform before locking */
+
+  PhoshCallsManager    *calls_manager;  /* Calls DBus Interface */
 };
 
 G_DEFINE_TYPE (PhoshLockscreenManager, phosh_lockscreen_manager, G_TYPE_OBJECT)
@@ -275,6 +278,9 @@ phosh_lockscreen_manager_set_property (GObject      *object,
   case PROP_LOCKED:
     phosh_lockscreen_manager_set_locked (self, g_value_get_boolean (value));
     break;
+  case PROP_CALLS_MANAGER:
+    self->calls_manager = g_value_dup_object (value);
+    break;
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
     break;
@@ -294,6 +300,9 @@ phosh_lockscreen_manager_get_property (GObject    *object,
   case PROP_LOCKED:
     g_value_set_boolean (value, self->locked);
     break;
+  case PROP_CALLS_MANAGER:
+    g_value_set_object (value, self->calls_manager);
+    break;
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
     break;
@@ -301,6 +310,15 @@ phosh_lockscreen_manager_get_property (GObject    *object,
 }
 
 
+static void
+on_calls_call_inbound (PhoshLockscreen *self)
+{
+  g_return_if_fail (PHOSH_IS_LOCKSCREEN_MANAGER (self));
+
+  g_signal_emit (self, signals[WAKEUP_OUTPUTS], 0);
+}
+
+
 static void
 phosh_lockscreen_manager_dispose (GObject *object)
 {
@@ -308,6 +326,7 @@ phosh_lockscreen_manager_dispose (GObject *object)
 
   g_clear_pointer (&self->shields, g_ptr_array_unref);
   g_clear_pointer (&self->lockscreen, phosh_cp_widget_destroy);
+  g_clear_object (&self->calls_manager);
 
   G_OBJECT_CLASS (phosh_lockscreen_manager_parent_class)->dispose (object);
 }
@@ -327,6 +346,12 @@ phosh_lockscreen_manager_constructed (GObject *object)
                               (GCallback) presence_status_changed_cb,
                               self);
   }
+
+  g_signal_connect_object (self->calls_manager,
+                           "call-inbound",
+                           G_CALLBACK (on_calls_call_inbound),
+                           self,
+                           G_CONNECT_SWAPPED);
 }
 
 
@@ -348,6 +373,13 @@ phosh_lockscreen_manager_class_init (PhoshLockscreenManagerClass *klass)
                           FALSE,
                           G_PARAM_READWRITE | G_PARAM_EXPLICIT_NOTIFY | G_PARAM_STATIC_STRINGS);
 
+  props[PROP_CALLS_MANAGER] =
+    g_param_spec_object ("calls-manager",
+                         "",
+                         "",
+                         PHOSH_TYPE_CALLS_MANAGER,
+                         G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | G_PARAM_CONSTRUCT_ONLY);
+
   g_object_class_install_properties (object_class, PROP_LAST_PROP, props);
 
   /**
@@ -370,9 +402,11 @@ phosh_lockscreen_manager_init (PhoshLockscreenManager *self)
 
 
 PhoshLockscreenManager *
-phosh_lockscreen_manager_new (void)
+phosh_lockscreen_manager_new (PhoshCallsManager *calls_manager)
 {
-  return g_object_new (PHOSH_TYPE_LOCKSCREEN_MANAGER, NULL);
+  return g_object_new (PHOSH_TYPE_LOCKSCREEN_MANAGER,
+                       "calls-manager", calls_manager,
+                       NULL);
 }
 
 /**
diff --git a/src/lockscreen-manager.h b/src/lockscreen-manager.h
index 8dcfc8c0..3b0501a9 100644
--- a/src/lockscreen-manager.h
+++ b/src/lockscreen-manager.h
@@ -6,6 +6,7 @@
 
 #pragma once
 
+#include "calls-manager.h"
 #include "lockscreen.h"
 #include <gtk/gtk.h>
 
@@ -17,7 +18,7 @@ G_DECLARE_FINAL_TYPE (PhoshLockscreenManager,
                       LOCKSCREEN_MANAGER,
                       GObject)
 
-PhoshLockscreenManager *phosh_lockscreen_manager_new (void);
+PhoshLockscreenManager *phosh_lockscreen_manager_new (PhoshCallsManager *calls_manager);
 void                    phosh_lockscreen_manager_set_locked  (PhoshLockscreenManager *self,
                                                               gboolean state);
 gboolean                phosh_lockscreen_manager_get_locked  (PhoshLockscreenManager *self);
diff --git a/src/shell.c b/src/shell.c
index 2120e1f8..99fd34b2 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -727,7 +727,7 @@ phosh_shell_constructed (GObject *object)
   css_setup (self);
 
   priv->calls_manager = phosh_calls_manager_new ();
-  priv->lockscreen_manager = phosh_lockscreen_manager_new ();
+  priv->lockscreen_manager = phosh_lockscreen_manager_new (priv->calls_manager);
   g_object_bind_property (priv->lockscreen_manager, "locked",
                           self, "locked",
                           G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE);
-- 
GitLab


From 04ad113587f78291aa4b5613ca1e80016b6f2504 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Wed, 7 Apr 2021 16:51:49 +0200
Subject: [PATCH 9/9] proximity: Only use proximity sensor on active calls
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

See https://source.puri.sm/Librem5/calls/-/issues/175

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/proximity.c | 65 +++++++++++++++++++++++++++----------------------
 src/proximity.h |  4 +--
 src/shell.c     |  2 +-
 3 files changed, 39 insertions(+), 32 deletions(-)

diff --git a/src/proximity.c b/src/proximity.c
index 169fba3f..1f57959f 100644
--- a/src/proximity.c
+++ b/src/proximity.c
@@ -19,13 +19,16 @@
  * SECTION:proximity
  * @short_description: Proximity sensor handling
  * @Title: PhoshProximity
+ *
+ * #PhoshProximity handles enabling and disabling the proximity detection
+ * based on e.g. active calls.
  */
 
 
 enum {
   PROP_0,
   PROP_SENSOR_PROXY_MANAGER,
-  PROP_LOCKSCREEN_MANAGER,
+  PROP_CALLS_MANAGER,
   LAST_PROP,
 };
 static GParamSpec *props[LAST_PROP];
@@ -35,7 +38,7 @@ typedef struct _PhoshProximity {
 
   gboolean claimed;
   PhoshSensorProxyManager *sensor_proxy_manager;
-  PhoshLockscreenManager *lockscreen_manager;
+  PhoshCallsManager *calls_manager;
   PhoshFader *fader;
 } PhoshProximity;
 
@@ -120,28 +123,32 @@ on_has_proximity_changed (PhoshProximity          *self,
 {
   gboolean has_proximity;
 
-  /* Don't claim if locked to save power */
-  if (phosh_lockscreen_manager_get_locked(self->lockscreen_manager))
-    return;
-
   has_proximity = phosh_dbus_sensor_proxy_get_has_proximity (
     PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager));
 
   g_debug ("Found %s proximity sensor", has_proximity ? "a" : "no");
+
+  /* If prox went a way we always unclaim but only claim on ongoing calls: */
+  if (!phosh_calls_manager_get_active_call (self->calls_manager) && has_proximity)
+    return;
+
   phosh_proximity_claim_proximity (self, has_proximity);
 }
 
+
 static void
-on_lockscreen_manager_locked (PhoshProximity *self, GParamSpec *pspec,
-                              PhoshLockscreenManager *lockscreen_manager)
+on_calls_manager_active_call_changed (PhoshProximity    *self,
+                                      GParamSpec        *pspec,
+                                      PhoshCallsManager *calls_manager)
 {
-  gboolean locked;
+  gboolean active;
 
   g_return_if_fail (PHOSH_IS_PROXIMITY (self));
-  g_return_if_fail (PHOSH_IS_LOCKSCREEN_MANAGER (lockscreen_manager));
+  g_return_if_fail (PHOSH_IS_CALLS_MANAGER (calls_manager));
 
-  locked = phosh_lockscreen_manager_get_locked(self->lockscreen_manager);
-  phosh_proximity_claim_proximity (self, !locked);
+  active = !!phosh_calls_manager_get_active_call(self->calls_manager);
+  phosh_proximity_claim_proximity (self, active);
+  /* TODO: if call is over wait until we hit the threshold */
 }
 
 
@@ -184,9 +191,9 @@ phosh_proximity_set_property (GObject *object,
       /* construct only */
       self->sensor_proxy_manager = g_value_dup_object (value);
       break;
-    case PROP_LOCKSCREEN_MANAGER:
+    case PROP_CALLS_MANAGER:
       /* construct only */
-      self->lockscreen_manager = g_value_dup_object (value);
+      self->calls_manager = g_value_dup_object (value);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -207,8 +214,8 @@ phosh_proximity_get_property (GObject *object,
   case PROP_SENSOR_PROXY_MANAGER:
     g_value_set_object (value, self->sensor_proxy_manager);
     break;
-  case PROP_LOCKSCREEN_MANAGER:
-    g_value_set_object (value, self->lockscreen_manager);
+  case PROP_CALLS_MANAGER:
+    g_value_set_object (value, self->calls_manager);
     break;
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -222,9 +229,9 @@ phosh_proximity_constructed (GObject *object)
 {
   PhoshProximity *self = PHOSH_PROXIMITY (object);
 
-  g_signal_connect_swapped (self->lockscreen_manager,
-                            "notify::locked",
-                            G_CALLBACK (on_lockscreen_manager_locked),
+  g_signal_connect_swapped (self->calls_manager,
+                            "notify::active-call",
+                            G_CALLBACK (on_calls_manager_active_call_changed),
                             self);
 
   g_signal_connect_swapped (self->sensor_proxy_manager,
@@ -255,10 +262,10 @@ phosh_proximity_dispose (GObject *object)
     g_clear_object (&self->sensor_proxy_manager);
   }
 
-  if (self->lockscreen_manager) {
-     g_signal_handlers_disconnect_by_data (self->lockscreen_manager,
+  if (self->calls_manager) {
+     g_signal_handlers_disconnect_by_data (self->calls_manager,
                                            self);
-     g_clear_object (&self->lockscreen_manager);
+     g_clear_object (&self->calls_manager);
   }
 
   g_clear_pointer (&self->fader, phosh_cp_widget_destroy);
@@ -285,12 +292,12 @@ phosh_proximity_class_init (PhoshProximityClass *klass)
       PHOSH_TYPE_SENSOR_PROXY_MANAGER,
       G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 
-  props[PROP_LOCKSCREEN_MANAGER] =
+  props[PROP_CALLS_MANAGER] =
     g_param_spec_object (
-      "lockscreen-manager",
-      "Lockscren manager",
-      "The object managing the lock screen",
-      PHOSH_TYPE_LOCKSCREEN_MANAGER,
+      "calls-manager",
+      "",
+      "",
+      PHOSH_TYPE_CALLS_MANAGER,
       G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 
   g_object_class_install_properties (object_class, LAST_PROP, props);
@@ -306,10 +313,10 @@ phosh_proximity_init (PhoshProximity *self)
 
 PhoshProximity *
 phosh_proximity_new (PhoshSensorProxyManager *sensor_proxy_manager,
-                     PhoshLockscreenManager *lockscreen_manager)
+                     PhoshCallsManager *calls_manager)
 {
   return g_object_new (PHOSH_TYPE_PROXIMITY,
                        "sensor-proxy-manager", sensor_proxy_manager,
-                       "lockscreen-manager", lockscreen_manager,
+                       "calls-manager", calls_manager,
                        NULL);
 }
diff --git a/src/proximity.h b/src/proximity.h
index ad9a0ed1..ef2e6da7 100644
--- a/src/proximity.h
+++ b/src/proximity.h
@@ -6,7 +6,7 @@
 
 #pragma once
 
-#include "lockscreen-manager.h"
+#include "calls-manager.h"
 #include "sensor-proxy-manager.h"
 
 G_BEGIN_DECLS
@@ -16,6 +16,6 @@ G_BEGIN_DECLS
 G_DECLARE_FINAL_TYPE (PhoshProximity, phosh_proximity, PHOSH, PROXIMITY, GObject);
 
 PhoshProximity *phosh_proximity_new (PhoshSensorProxyManager *sensor_proxy_manager,
-                                     PhoshLockscreenManager *lockscreen_manager);
+                                     PhoshCallsManager       *calls_manager);
 
 G_END_DECLS
diff --git a/src/shell.c b/src/shell.c
index 99fd34b2..9122c5ed 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -513,7 +513,7 @@ setup_idle_cb (PhoshShell *self)
   phosh_shell_get_location_manager (self);
   if (priv->sensor_proxy_manager) {
     priv->proximity = phosh_proximity_new (priv->sensor_proxy_manager,
-                                           priv->lockscreen_manager);
+                                           priv->calls_manager);
     phosh_monitor_manager_set_sensor_proxy_manager (priv->monitor_manager,
                                                     priv->sensor_proxy_manager);
   }
-- 
GitLab

